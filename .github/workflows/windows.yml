name: Windows Build

on:
  push:
    # Windows is experimental, so we build only on windows branch
    branches: [ windows ]

jobs: 
  job:
    runs-on: windows-latest
    env:
      buildDir: '${{ github.workspace }}/build/'
    steps:
      # Install latest CMake.
      - uses: lukka/get-cmake@latest

      # Don't install Qt via VCPKG, but use a github action
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          #arch: 'win64_msvc2017_64'
          
      # Don't install boost via VCPKG, that takes about an hour and fills up the disk
      - name: Install boost
        uses: MarkusJx/install-boost@v1.0.1
        id: install-boost
        with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here: 
          # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
          boost_version: 1.71.0

      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # Restore from cache the previously built ports. If a "cache miss" occurs, then vcpkg is bootstrapped. Since a the vcpkg.json is being used later on to install the packages when run-cmake runs, no packages are installed at this time and the input 'setupOnly:true' is mandatory.
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v7
        with:
          # Just install vcpkg for now, do not install any ports in this step yet.
          setupOnly: true
          # Location of the vcpkg submodule in the Git repository.
          vcpkgDirectory: '${{ github.workspace }}/third_party/vcpkg'
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: ${{ hashFiles( '**/vcpkg_manifest/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.triplet }}
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed' directory.
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed

      - name: Run CMake to install the dependencies specified in the vcpkg.json manifest, generate project file and build the project
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          buildDirectory: ${{ env.buildDir }}
          # This input tells run-cmake to consume the vcpkg.cmake toolchain file set by run-vcpkg.
          useVcpkgToolchainFile: true
          buildWithCMake: true